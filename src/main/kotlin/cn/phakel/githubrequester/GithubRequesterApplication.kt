package cn.phakel.githubrequesterimport cn.phakel.githubrequester.event.Eventimport cn.phakel.githubrequester.event.TestEventimport cn.phakel.githubrequester.listener.EventBusimport cn.phakel.githubrequester.listener.Listenerimport org.slf4j.LoggerFactoryimport org.springframework.boot.SpringApplicationimport org.springframework.boot.autoconfigure.SpringBootApplicationimport java.util.*import kotlin.collections.HashMap@SpringBootApplicationclass GithubRequesterApplication {    private var port: Int = 8080    private val app = SpringApplication(GithubRequesterApplication::class.java)    private lateinit var args: Array<String>    private val listeners = HashMap<Event, Listener>()    private val logger = LoggerFactory.getLogger(GithubRequesterApplication::class.java)    fun registerListener(type: Event, listener: Listener): GithubRequesterApplication {        listeners[type] = listener        return this    }    /**     * Set Server Running Port.     */    fun setPort(port: Int): GithubRequesterApplication {        this.port = port        return this    }    /**     * Initialize the Webhook Server.     */    fun build(): GithubRequesterApplication {        app.setDefaultProperties(Collections.singletonMap("server.port", port) as Map<String, Any>?)        app.run(*args)        logger.info("Initialized the Webhook Server.")        listeners            .entries            .stream()            .forEach { listener -> EventBus().registerListener(listener.key, listener.value) }        logger.info("Registered the Listeners.")        return this    }}fun main(args: Array<String>) {    val server = GithubRequesterApplication()        .setPort(8080)        .build()}