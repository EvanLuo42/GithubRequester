package cn.phakel.githubrequesterimport cn.phakel.githubrequester.event.TestEventimport cn.phakel.githubrequester.listener.EventBusimport cn.phakel.githubrequester.listener.Listenerimport cn.phakel.githubrequester.listener.Subscribeimport org.slf4j.LoggerFactoryimport org.springframework.boot.SpringApplicationimport org.springframework.boot.autoconfigure.SpringBootApplicationimport java.util.*@SpringBootApplicationclass GithubRequesterApplication {    private var port: Int = 8080    private val app = SpringApplication(GithubRequesterApplication::class.java)    private lateinit var args: Array<String>    private val listeners = mutableListOf<Listener>()    private val logger = LoggerFactory.getLogger(GithubRequesterApplication::class.java)    private val eventBus = EventBus()    fun getEventBus(): EventBus {        return eventBus    }    fun registerListener(listener: Listener): GithubRequesterApplication {        listeners.add(listener)        return this    }    fun setArgs(args: Array<String>): GithubRequesterApplication {        this.args = args        return this    }    /**     * Set Server Running Port.     */    fun setPort(port: Int): GithubRequesterApplication {        this.port = port        return this    }    /**     * Initialize the Webhook Server.     */    fun build(): GithubRequesterApplication {        app.setDefaultProperties(Collections.singletonMap("server.port", port) as Map<String, Any>?)        app.run(*args)        logger.info("Initialized the Webhook Server.")        listeners            .stream()            .forEach { eventBus.registerListener(it) }        logger.info("Registered the Listeners.")        return this    }}fun main(args: Array<String>) {    val test = Test()    val server = GithubRequesterApplication()        .setPort(8080)        .setArgs(args)        .registerListener(test)        .build()    print(test.javaClass.declaredMethods.forEach { it.getAnnotation(Subscribe::class.java).event })    server.getEventBus().post(TestEvent())}